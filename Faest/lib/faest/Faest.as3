// This file was automatically generated by SWIG (http://www.swig.org).
// Version 2.0.4
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.

/* Function pointers support */
package com.adobe.flascc.swig {
import flash.utils.Dictionary;
import com.adobe.flascc.CModule;

[Weak]
var _SWIG_AS3Func2Ptr:Dictionary = new Dictionary();
[Weak]
var _SWIG_AS3Ptr2Func:Dictionary = new Dictionary();
[Weak]
var _SWIG_AS3FreeFuncPtrs:Array = new Array();

[Weak]
public function SWIG_AS3RegASCallWrapper(ptr:int, wrapper:Function):void {
    if (_SWIG_AS3Ptr2Func[ptr]) {
        throw("tried to register AS-callable wrapper for existing AS wrapper");
    }
    _SWIG_AS3Func2Ptr[wrapper] = ptr;
    _SWIG_AS3Ptr2Func[ptr] = wrapper;
}

[Weak]
public function SWIG_AS3UnregASCallWrapper(wrapper:Function):void {
    var ptr:int = _SWIG_AS3Func2Ptr[wrapper];
    delete _SWIG_AS3Func2Ptr[wrapper];
    delete _SWIG_AS3Ptr2Func[ptr];
}

// Returns Function objects callable from AS
[Weak]
public function SWIG_AS3GetASCallWrapper(ptr:int):Function {
    if (_SWIG_AS3Ptr2Func[ptr]) {
        return _SWIG_AS3Ptr2Func[ptr];
    } else {
        return null;
    }
}

// Returns the number of wrapped C and AS functions
[Weak]
public function SWIG_AS3WrapperNum():uint {
    var num:uint = 0;
    for (var key:int in _SWIG_AS3Ptr2Func) {
        num++;
    }
    return num;
}

[Weak]
public function SWIG_AS3RegCCallWrapper(func:Function, wrapper:Function):void {
    var ptr:int;
    
    if (_SWIG_AS3Func2Ptr[func]) {
        throw("tried to register C-callable wrapper for native C function");
    }

    if (_SWIG_AS3FreeFuncPtrs.length) {
        ptr = _SWIG_AS3FreeFuncPtrs.pop();
    } else {
        ptr = CModule.allocFunPtrs(null, 1, 4);
    }
    CModule.regFun(ptr, wrapper);
    _SWIG_AS3Func2Ptr[func] = ptr;
    _SWIG_AS3Ptr2Func[ptr] = func;

}

[Weak]
public function SWIG_AS3UnregCCallWrapper(func:Function):void {
    var ptr:int = _SWIG_AS3Func2Ptr[func];
    delete _SWIG_AS3Func2Ptr[func];
    delete _SWIG_AS3Ptr2Func[ptr];
    _SWIG_AS3FreeFuncPtrs.push(ptr);
}

// Returns a C function pointer corresponding to an Actionscript-callable 
// wrapper Function. (The C function is callable from C, of course).
[Weak]
public function SWIG_AS3GetCCallPtr(func:Function):int {
    if (_SWIG_AS3Func2Ptr[func]) {
        return _SWIG_AS3Func2Ptr[func];
    } else {
        return 0;
    }
}
} /* package */


package {
import C_Run.*;
import com.adobe.flascc.swig.*;
import flash.utils.ByteArray;

public class Faest {
	public static function get KEY128():int{
		return _wrap_KEY128();
	}

	public static function get KEY192():int{
		return _wrap_KEY192();
	}

	public static function get KEY256():int{
		return _wrap_KEY256();
	}

	public static function get BLOCKSZ():int{
		return _wrap_BLOCKSZ();
	}

	public static function get EBC():int{
		return _wrap_EBC();
	}

	public static function get CBC():int{
		return _wrap_CBC();
	}

	public static function AesCtxIni(pCtx:int, ivPointer:int, keyPointer:int, KeyLen:int, Mode:String):int {
		return _wrap_AesCtxIni(pCtx, ivPointer, keyPointer, KeyLen, Mode);
	}

	public static function AesDecrypt(pCtx:int, cipher:int, data:int, CipherLen:int):int {
		return _wrap_AesDecrypt(pCtx, cipher, data, CipherLen);
	}

}

public class AesCtx {
	public var swigCPtr:int;
	public function set Ek(Ek:int):void {
		_wrap_AesCtx_Ek_set(swigCPtr, Ek);
	}

	public function get Ek():int {
		return _wrap_AesCtx_Ek_get(swigCPtr);
	}

	public function set Dk(Dk:int):void {
		_wrap_AesCtx_Dk_set(swigCPtr, Dk);
	}

	public function get Dk():int {
		return _wrap_AesCtx_Dk_get(swigCPtr);
	}

	public function set Iv(Iv:int):void {
		_wrap_AesCtx_Iv_set(swigCPtr, Iv);
	}

	public function get Iv():int {
		return _wrap_AesCtx_Iv_get(swigCPtr);
	}

	public function set Nr(Nr:String):void {
		_wrap_AesCtx_Nr_set(swigCPtr, Nr);
	}

	public function get Nr():String {
		return _wrap_AesCtx_Nr_get(swigCPtr);
	}

	public function set Mode(Mode:String):void {
		_wrap_AesCtx_Mode_set(swigCPtr, Mode);
	}

	public function get Mode():String {
		return _wrap_AesCtx_Mode_get(swigCPtr);
	}

	public static function create():AesCtx {
		var obj = new AesCtx();
		obj.swigCPtr = _wrap_new_AesCtx();
		return obj;
	}

	public function destroy():void {
		_wrap_delete_AesCtx(swigCPtr);
	}

}

} /* package */
